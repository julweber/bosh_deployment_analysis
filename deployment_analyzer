#! /usr/bin/env ruby
require_relative 'lib/deployment_file_reader.rb'

def check_args
  if ARGV[0].nil? || ARGV[0] == ''
    puts "Usage: deployment_analyzer <deployment_file_path>"
    exit -1
  end
end

def analyze_manifest(manifest_hash, details_on = false)
  puts "### Analysis results ###"
  analyze_releases(manifest_hash, details_on)
  analyze_jobs(manifest_hash, details_on)
  analyze_disk_usage(manifest_hash)
  analyze_vm_usage(manifest_hash)
end

def analyze_releases(manifest_hash, details_on = false)
  puts ''
  puts '### Releases ###'
  pp manifest_hash['releases']
end

def analyze_jobs(manifest_hash, details_on = false)
  puts ''
  puts '### Jobs ###'
  get_jobs_with_instances(manifest_hash).each do |job|
    puts "- #{job['name']}; #{job['instances']} vms : "
    analyze_persistent_disk job, manifest_hash

    if details_on
      puts "  - Resource pool: #{job['resource_pool']}"
      puts "  - Templates:"
      pp job['templates']
    end
    puts ''
  end
end

def analyze_persistent_disk(job, manifest_hash)
  unless job['persistent_disk'].nil?
    puts "  - disk_size: #{job['persistent_disk']}"
  end
  unless job['persistent_disk_pool'].nil?
    disk_pool_name = job['persistent_disk_pool']
    disk_pool = get_disk_pool manifest_hash, disk_pool_name
    disk_pool_size = disk_pool['disk_size']
    puts "  - disk_pool: #{disk_pool_name}"
    puts "    disk_size: #{disk_pool_size}"
  end
end

def analyze_disk_usage(manifest_hash)
  puts '### Disk Usage ###'
  disk_usage = 0
  get_jobs_with_instances(manifest_hash).each do |job|
    unless job['persistent_disk_pool'].nil?
      pool = get_disk_pool(manifest_hash, job['persistent_disk_pool'])
      disk_usage += pool['disk_size'] * job['instances']
      puts "- job: #{job['name']}; vms: #{job['instances']} ; pool: #{job['persistent_disk_pool']} -> #{pool['disk_size']}"
    end
  end
  puts ''
  puts "Total: #{disk_usage} MB -> #{disk_usage/1024.0} GB"
  puts ''
end

def analyze_vm_usage(manifest_hash)
  puts '### VM Usage ###'
  usage = {}

  # initialize usage array
  get_resource_pools(manifest_hash).each do |rp|
    name = rp['name']
    vm_type = 'undefined'
    avl_zone = 'undefined'

    unless rp['cloud_properties'].nil?
      vm_type = rp['cloud_properties']['instance_type'] unless rp['cloud_properties']['instance_type'].nil?
      avl_zone = rp['cloud_properties']['availability_zone'] unless rp['cloud_properties']['availability_zone'].nil?
    end

    usage[name] = { name: name, type: vm_type, avl_zone: avl_zone, count: 0 }
  end

  # fill usage array
  get_jobs_with_instances(manifest_hash).each do |job|
    usage[job['resource_pool']][:count] = usage[job['resource_pool']][:count]+job['instances'].to_i
  end

  number_of_vms = 0
  usage.each do |key, item|
    puts "- Pool: #{item[:name]} , Avl Zone: #{item[:avl_zone]}, Type: #{item[:type]}, Count: #{item[:count]}"
    number_of_vms += item[:count]
  end

  puts ''
  puts "Total VMs: #{number_of_vms}"
  puts ''
end

def main
  check_args
  manifest = load_yml ARGV[0]
  details_on = false
  details_on = true if ARGV[1] == '--details'
  analyze_manifest manifest, details_on
end

main
